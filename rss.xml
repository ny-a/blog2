<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Blog]]></title><description><![CDATA[My study log of software development]]></description><link>https://ny-a.github.io/blog2</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 25 Jan 2020 15:01:56 GMT</lastBuildDate><item><title><![CDATA[gridsomeを使ってみました]]></title><description><![CDATA[いつものように
9 Projects you can do to become a Frontend Master in 2020
を進めていっています。
今回は gridsome を使ったブログです。 だいたい gatsby…]]></description><link>https://ny-a.github.io/blog2/2020-01/introduction-of-gridsome/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/introduction-of-gridsome/</guid><pubDate>Sun, 26 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;いつものように
&lt;a href=&quot;https://dev.to/simonholdorf/9-projects-you-can-do-to-become-a-frontend-master-in-2020-n2h&quot;&gt;9 Projects you can do to become a Frontend Master in 2020&lt;/a&gt;
を進めていっています。
今回は gridsome を使ったブログです。&lt;/p&gt;
&lt;p&gt;だいたい gatsby と同じような感じですが、クエリを &lt;code class=&quot;language-text&quot;&gt;&amp;lt;page-query&amp;gt;&lt;/code&gt; 内に書くなど、 Vue らしさというか XML 側に寄せているような
雰囲気があるのが大きな違いでしょうか。&lt;/p&gt;
&lt;p&gt;HTML や vanilla な javascript はもはやバイナリのような扱いを受けることもあるので、
React/Gatsby など、 typescript などにロジックを寄せて、html なども生成するような形にするのが筋が通っているように感じられます。&lt;/p&gt;
&lt;p&gt;……というのは多分 &lt;code class=&quot;language-text&quot;&gt;&amp;lt;page-query&amp;gt;&lt;/code&gt; 内のインデントがボロボロになってしまったのが気になったのもあると思います。
Intellij 用の gridsome プラグインを書きましょう……となりました。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ページネーションの方向を変えました]]></title><description><![CDATA[個別のポストのページと、一覧ページのページネーションの向きが逆だったので、
個別のポストのページの方向に揃えました。 それと、 next や previous では方向が分かりにくいと感じることが多いため、 newer と older に変更しました。]]></description><link>https://ny-a.github.io/blog2/2020-01/change-pagination-direction/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/change-pagination-direction/</guid><pubDate>Sat, 25 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;個別のポストのページと、一覧ページのページネーションの向きが逆だったので、
個別のポストのページの方向に揃えました。&lt;/p&gt;
&lt;p&gt;それと、 next や previous では方向が分かりにくいと感じることが多いため、 newer と older に変更しました。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Cockpitプロジェクトについて調べました]]></title><description><![CDATA[Cockpit は、Linux マシンの管理用の Web アプリです。 debian/RHEL 系では標準のレポジトリに入っていて、インストールすればあとは接続するだけで使えるようになります。 ある程度のことは GUI で設定可能ですし、 shell…]]></description><link>https://ny-a.github.io/blog2/2020-01/cockpit-project/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/cockpit-project/</guid><pubDate>Fri, 24 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://github.com/cockpit-project/cockpit&quot;&gt;Cockpit&lt;/a&gt; は、Linux マシンの管理用の Web アプリです。&lt;/p&gt;
&lt;p&gt;debian/RHEL 系では標準のレポジトリに入っていて、インストールすればあとは接続するだけで使えるようになります。&lt;/p&gt;
&lt;p&gt;ある程度のことは GUI で設定可能ですし、 shell も用意されているので、ほとんどの操作が可能です。
shell はショートカット等にも対応していて、操作性もいい方だと思いました。&lt;/p&gt;
&lt;p&gt;API のドキュメントなどもあるようなので、機能のカスタマイズもできそうです。
ブラウザからサーバーを管理する必要があれば使ってみようと思いました。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ヒューリスティック質問]]></title><description><![CDATA[なぜ「事実」と「意見」を区別して話せない人がいるのか。 - Books&Apps
を読んで、ターゲット質問とヒューリスティック質問というものを知りました。 Daniel Kahneman, Thinking, Fast and Slow…]]></description><link>https://ny-a.github.io/blog2/2020-01/heuristic-question/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/heuristic-question/</guid><pubDate>Thu, 23 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://blog.tinect.jp/?p=62453&quot;&gt;なぜ「事実」と「意見」を区別して話せない人がいるのか。 - Books&amp;#x26;Apps&lt;/a&gt;
を読んで、ターゲット質問とヒューリスティック質問というものを知りました。&lt;/p&gt;
&lt;p&gt;Daniel Kahneman, Thinking, Fast and Slow に書いてあるようで、原文の引用は以下にあります。
&lt;a href=&quot;https://jamesmacmillan.wordpress.com/2015/01/29/target-question-vs-heuristic-question/&quot;&gt;Target question vs. Heuristic question - Bologna&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;確かに脳がこういう動きをしている気はします。脳の動きについては自分自身のことでも完全には理解できていないので、
当てはまりそうなものを見つけて分析していきたいと思っています。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[W3Techsを見つけました]]></title><description><![CDATA[PHPはもうダメだ、PHP万歳！ - POSTD
を読んでいるときに、
W3Techs
の調査を見つけました。
最近 POSTD をあまり見ていなかったのですが、 2019/04 から更新がないようですね……。 W3Techs の調査を見てみると、PHP や jQuery…]]></description><link>https://ny-a.github.io/blog2/2020-01/found-w3techs/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/found-w3techs/</guid><pubDate>Wed, 22 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://postd.cc/php-is-dead-viva-le-php/&quot;&gt;PHPはもうダメだ、PHP万歳！ - POSTD&lt;/a&gt;
を読んでいるときに、
&lt;a href=&quot;https://w3techs.com/&quot;&gt;W3Techs&lt;/a&gt;
の調査を見つけました。
最近 POSTD をあまり見ていなかったのですが、 2019/04 から更新がないようですね……。&lt;/p&gt;
&lt;p&gt;W3Techs の調査を見てみると、PHP や jQuery の使用率が 70% を超えていて、
身の周りで感じる感覚とは全く違う値が示されています。
もしかしたら、 uglify や minify の影響を受けているのかもしれません。
ただ、既存プロジェクトで PHP などを使っている場面は普通に見かけるので、
身の周りで新規に作っているもの以外で考えると一般的なのかもしれません。&lt;/p&gt;
&lt;p&gt;最近は &lt;code class=&quot;language-text&quot;&gt;ecmascript&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;typescript&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;babel&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;core-js&lt;/code&gt; などがあるので、
jquery を少しずつ新しい技術に移行していくことも可能だと思っています。
時間を作って試してみたいと思います。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://youmightnotneedjquery.com/&quot;&gt;You might not need jQuery&lt;/a&gt;
も移行に役立ちそうです。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[JSXを単体で使ってみました]]></title><description><![CDATA[JSX といえば React というイメージですが、別に一緒に使わないといけないわけではないと思うので、
,  あたりを使って試してみました。  相当のライブラリは一旦  を使ってみました。
Lessons learned using JSX without React…]]></description><link>https://ny-a.github.io/blog2/2020-01/introduction-of-jsx/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/introduction-of-jsx/</guid><pubDate>Tue, 21 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;JSX といえば React というイメージですが、別に一緒に使わないといけないわけではないと思うので、
&lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;babel&lt;/code&gt; あたりを使って試してみました。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;React.createElement&lt;/code&gt; 相当のライブラリは一旦 &lt;code class=&quot;language-text&quot;&gt;jsx-render&lt;/code&gt; を使ってみました。
&lt;a href=&quot;https://itnext.io/lessons-learned-using-jsx-without-react-bbddb6c28561&quot;&gt;Lessons learned using JSX without React&lt;/a&gt;
を参考にしましたが、レポジトリが消えているようなので代替を探す必要があるかもしれません。&lt;/p&gt;
&lt;p&gt;また、 &lt;code class=&quot;language-text&quot;&gt;eslint&lt;/code&gt; や &lt;code class=&quot;language-text&quot;&gt;prettier&lt;/code&gt; もよく使うのでインストールしました。
eslint で JSX はサポートされているようですが、 unused-var になるなど問題点もあるようです。&lt;/p&gt;
&lt;p&gt;Aurelia などもありますが、できるだけフロントエンドフレームワークを使わないで Web 標準を使って
Web アプリを作る方法を模索してみるのもよいかもしれません。(JSX, Web components など。)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Reactを使ってみました]]></title><description><![CDATA[9 Projects you can do to become a Frontend Master in 2020
を進めています。 Tutorial は
How to build a movie search app using React Hooks…]]></description><link>https://ny-a.github.io/blog2/2020-01/introduction-of-react/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/introduction-of-react/</guid><pubDate>Mon, 20 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://dev.to/simonholdorf/9-projects-you-can-do-to-become-a-frontend-master-in-2020-n2h&quot;&gt;9 Projects you can do to become a Frontend Master in 2020&lt;/a&gt;
を進めています。&lt;/p&gt;
&lt;p&gt;Tutorial は
&lt;a href=&quot;https://www.freecodecamp.org/news/how-to-build-a-movie-search-app-using-react-hooks-24eb72ddfaf7/&quot;&gt;How to build a movie search app using React Hooks&lt;/a&gt;
です。&lt;/p&gt;
&lt;p&gt;今回も &lt;code class=&quot;language-text&quot;&gt;create-react-app&lt;/code&gt; を使わずに from scratch で作成します。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;yarn add -D @babel/core @babel/cli @babel/preset-env @babel/presetpack-dev-server style-loader css-loader babel-loader 
yarn add react react-dom                                      
yarn add -D @types/react @types/react-dom ts-loader typescript
yarn add react-hot-loader&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;styled-components なんかも使っていきたいと思っています。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Svelteをwebpackで使ってみました]]></title><description><![CDATA[Building A Svelte 3 Todo App From Start To Deployment
に従いつつ、 rollup の代わりに webpack を使って from stratch で作成してみました。 手順 まずは Svelte…]]></description><link>https://ny-a.github.io/blog2/2020-01/svelte-webpack/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/svelte-webpack/</guid><pubDate>Sun, 19 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://medium.com/codingthesmartway-com-blog/building-a-svelte-3-todo-app-from-start-to-deployment-1737f72c23a6&quot;&gt;Building A Svelte 3 Todo App From Start To Deployment&lt;/a&gt;
に従いつつ、 rollup の代わりに webpack を使って from stratch で作成してみました。&lt;/p&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;p&gt;まずは Svelte アプリの作成をします。 webpack を使った template は
&lt;a href=&quot;https://github.com/sveltejs/template-webpack&quot;&gt;sveltejs/template-webpack&lt;/a&gt;
にありますが、これを参考に以下のコマンドを実行します。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;mkdir svelte-todo-webpack
cd svelte-todo-webpack
yarn init
git init
yarn add -D webpack{,-cli,-dev-server} svelte{,-loader} {css,style}-loader mini-css-extract-plugin&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;今回は &lt;code class=&quot;language-text&quot;&gt;cross-env&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;serve&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;sirv-cli&lt;/code&gt; などを使わないようにするため、いくつか変更している箇所があります。
とは言っても、 &lt;code class=&quot;language-text&quot;&gt;serve&lt;/code&gt; はどこで使っているか分からなかったので、単に webpack の設定を function にして、
&lt;code class=&quot;language-text&quot;&gt;--env.NODE_ENV=development&lt;/code&gt; という風に渡すように変更しただけですが。……多分。&lt;/p&gt;
&lt;p&gt;あとはシュッと ToDo アプリの実装をします。簡単でしたね。&lt;/p&gt;
&lt;h2&gt;HMR でのエラー&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;TypeError: &amp;quot;todoitem.$on is not a function&amp;quot;&lt;/code&gt;
というようなエラーがブラウザのコンソールに出ていました。
どうやら HMR に対応していないようなので、 HMR を無効にすることで対応しました。&lt;/p&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;他のフレームワークで webpack+babel+typescript といった構成にすることが多いので、 rollup のときよりも理解がしやすい
構成になっているかなと思いました。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[esModuleInteropを使わないようにしました]]></title><description><![CDATA[このブログに Typescript を導入したとき、 default import でエラーが出ていたので一旦
 に  を追加して対処していました。 ただ、デフォルトの設定を変更するのはあまり好ましくないと感じたので、
microsoft/TypeScript#333…]]></description><link>https://ny-a.github.io/blog2/2020-01/get-rid-of-es-module-interop/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/get-rid-of-es-module-interop/</guid><pubDate>Sat, 18 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;このブログに Typescript を導入したとき、 default import でエラーが出ていたので一旦
&lt;code class=&quot;language-text&quot;&gt;tsconfig.json&lt;/code&gt; に &lt;code class=&quot;language-text&quot;&gt;esModuleInterop&lt;/code&gt; を追加して対処していました。&lt;/p&gt;
&lt;p&gt;ただ、デフォルトの設定を変更するのはあまり好ましくないと感じたので、
&lt;a href=&quot;https://github.com/microsoft/TypeScript/issues/3337&quot;&gt;microsoft/TypeScript#3337&lt;/a&gt;
を参考に、 &lt;code class=&quot;language-text&quot;&gt;import React from &amp;#39;react&lt;/code&gt; を &lt;code class=&quot;language-text&quot;&gt;import * as React from &amp;#39;react&lt;/code&gt; に
書き換えることで対処しました。&lt;/p&gt;
&lt;p&gt;これが esModuleInterop に対する正しい対処方法かは分かりませんが……。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Gatsbyのブログにページネーションを追加しました]]></title><description><![CDATA[この Gatsby を使っているブログも10ポストを超えてきました。
そこで、普通のブログのようにページネーションを導入しました。 NickyMeuleman/gatsby-paginated-blog
を参考に、といっても  と  を編集するだけですが……。
commit e…]]></description><link>https://ny-a.github.io/blog2/2020-01/add-pagination-to-gatsby-blog/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/add-pagination-to-gatsby-blog/</guid><pubDate>Fri, 17 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;この Gatsby を使っているブログも10ポストを超えてきました。
そこで、普通のブログのようにページネーションを導入しました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/NickyMeuleman/gatsby-paginated-blog&quot;&gt;NickyMeuleman/gatsby-paginated-blog&lt;/a&gt;
を参考に、といっても &lt;code class=&quot;language-text&quot;&gt;gatsby-node.js&lt;/code&gt; と &lt;code class=&quot;language-text&quot;&gt;src/pages/index.js&lt;/code&gt; を編集するだけですが……。
&lt;a href=&quot;https://github.com/ny-a/blog2/commit/e871f7ec3e153bb8feec22719ca94e8bce3347e2&quot;&gt;commit e871f7e&lt;/a&gt;
で変更した通りです。 &lt;/p&gt;
&lt;p&gt;実装を見てみると簡易的なもののようなので、10ページ程度になる前にもうちょっとちゃんとした
実装に変更しないといけないかなと思っています。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[unpkgとtagged template literal]]></title><description><![CDATA[UNPKG と tagged template literal を知りました。 IE 非対応……babel 使いましょうという感じですね。]]></description><link>https://ny-a.github.io/blog2/2020-01/introduction-of-unpkg-and-template-literal/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/introduction-of-unpkg-and-template-literal/</guid><pubDate>Thu, 16 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://unpkg.com/&quot;&gt;UNPKG&lt;/a&gt; と &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;tagged template literal&lt;/a&gt; を知りました。&lt;/p&gt;
&lt;p&gt;IE 非対応……babel 使いましょうという感じですね。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[GatsbyでTypescriptを使い始めました]]></title><description><![CDATA[gatsbyを使い始めました で typescript について言及していたので、
typescript を導入してみました。 gatsby-plugin-typescript をインストールして、
props とかの型を適当につけて、tsx…]]></description><link>https://ny-a.github.io/blog2/2020-01/migrate-gatsby-blog-to-typescript/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/migrate-gatsby-blog-to-typescript/</guid><pubDate>Wed, 15 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;/blog2/2020-01/introduction-of-gatsby/&quot;&gt;gatsbyを使い始めました&lt;/a&gt; で typescript について言及していたので、
typescript を導入してみました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.gatsbyjs.org/packages/gatsby-plugin-typescript/&quot;&gt;gatsby-plugin-typescript&lt;/a&gt; をインストールして、
props とかの型を適当につけて、tsx に変えればほぼ終了です。&lt;/p&gt;
&lt;p&gt;Gatsby の設定ファイルも typescript にしようと思って
&lt;a href=&quot;https://gist.github.com/clarkdave/53cc050fa58d9a70418f8a76982dd6c8&quot;&gt;clarkdave さんの Gist&lt;/a&gt;
を参考にやってみたのですが、 slug の生成周りがうまくいかなかったので、一旦そのままにしています。
Gatsby の actions なんかを調べながら再挑戦しようと思っています。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[CORSのテストができるサイトを見つけました]]></title><description><![CDATA[CORSのテストができるサイトを見つけました。 monsur/test-cors.org CORSのテストができます。 いやまあ、適当に Axios なんかでリクエスト飛ばせばいい話なんですが……]]></description><link>https://ny-a.github.io/blog2/2020-01/found-test-cors/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/found-test-cors/</guid><pubDate>Tue, 14 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;CORSのテストができるサイトを見つけました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/monsur/test-cors.org&quot;&gt;monsur/test-cors.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CORSのテストができます。&lt;/p&gt;
&lt;p&gt;いやまあ、適当に Axios なんかでリクエスト飛ばせばいい話なんですが……&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Gatsbyのスタイルを変更しました]]></title><description><![CDATA[このブログを作成するときに  を使ったのですが、スタイルを変えていなかったので、
 から  をコピーしてみました。 そろそろ Gatsby についてもう少し学んでもいいかなと思いました。]]></description><link>https://ny-a.github.io/blog2/2020-01/append-default-style/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/append-default-style/</guid><pubDate>Mon, 13 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;このブログを作成するときに &lt;code class=&quot;language-text&quot;&gt;gatsby-starter-blog&lt;/code&gt; を使ったのですが、スタイルを変えていなかったので、
&lt;code class=&quot;language-text&quot;&gt;gatsby-starter-default&lt;/code&gt; から &lt;code class=&quot;language-text&quot;&gt;style.css&lt;/code&gt; をコピーしてみました。&lt;/p&gt;
&lt;p&gt;そろそろ Gatsby についてもう少し学んでもいいかなと思いました。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[なぜIDEの支援機能を使うのか]]></title><description><![CDATA[少し前まで IDE の補完機能など、コーディングの支援機能を使いながらコーディングすることが、
なんだか IDE にコーディングさせられているようで嫌でした。 これは恐らく私だけが感じていることではなくて、初心者の方のツイートで
IDE…]]></description><link>https://ny-a.github.io/blog2/2020-01/why-programmers-use-ide/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/why-programmers-use-ide/</guid><pubDate>Sun, 12 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;少し前まで IDE の補完機能など、コーディングの支援機能を使いながらコーディングすることが、
なんだか IDE にコーディングさせられているようで嫌でした。&lt;/p&gt;
&lt;p&gt;これは恐らく私だけが感じていることではなくて、初心者の方のツイートで
IDE なしでコーディングする/コーディングできるようになりたい、といった
発言を見かけることがあります。&lt;/p&gt;
&lt;p&gt;ただ、これは開発の規模がまだ小さいときに強く感じるものだと思います。
コードベースの規模が大きくなってくると、細かい所まで全て覚えていられないですし、
コーディング量が増えるにつれてミスをする確立も上がっていきます。
そんなときに IDE を使っていると、例え補完機能を(候補が出ても無視して)
ほとんど使っていなかったとしても、ミスがあればすぐに知らせてくれますし、
仮にスペルに自信がないなどの場合にも補完機能を使ってスムーズにコーディングを進めることができます。
(もし補完機能を使っていなければ定義されている箇所を確認することになりますし、
早くミスを見つけるためには頻繁にコンパイル等をする必要があります。)&lt;/p&gt;
&lt;p&gt;コンピュータはコアとなるロジックを実装されるまで知りません。
プログラマーはそのコアロジックの実装に集中することで生産性を高めようとしています。
そのため、既に実装されている部分やライブラリについてはコンピュータの助けを借りて、
新しい部分の実装に集中することができるのです。&lt;/p&gt;
&lt;p&gt;もちろん、主体的にプログラミングする必要があります。
いくら候補が表示されているからといって、何も考えずにそれを選んでいると間違うこともあります。
自分で何を実装すべきかをきちんと認識した上で、実際のコード上の表現について
助けを借りる、といった考え方が合っているのかなと思っています。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[AndroidアプリでHelloWorldをしました]]></title><description><![CDATA[今まで Android アプリ開発には Android Studio を使っていて、
IntelliJ IDEA と両方使っていたのですが、 Android アプリも
Intellij IDEA で開発してみました。 背景 今までも何度か IntelliJ で Android…]]></description><link>https://ny-a.github.io/blog2/2020-01/helloworld-android-with-intellij/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/helloworld-android-with-intellij/</guid><pubDate>Sat, 11 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;今まで Android アプリ開発には Android Studio を使っていて、
IntelliJ IDEA と両方使っていたのですが、 Android アプリも
Intellij IDEA で開発してみました。&lt;/p&gt;
&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;今までも何度か IntelliJ で Android アプリの開発を試みていたのですが、
謎のエラーに悩まされていて、特に Visual Layout Editor が機能しなくて困っていました。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Sync Project with Gradle Files&lt;/code&gt; を選ぶと以下のエラーが出ていました。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;New Gradle Sync is not supported due to containing Kotlin modules&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;上記のエラーメッセージで検索すると、皆さんいろいろな方法で解決されているようですが、
私はどの方法でも解決しませんでした。&lt;/p&gt;
&lt;p&gt;結論としては、システムの JRE のバージョンが 13 だったことが原因だったようです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/index.php/Java#Launching_an_application_with_the_non-default_java_version&quot;&gt;Java - Arch Wiki&lt;/a&gt;
を参考に、 IntelliJ を Java8(1.8) を使って起動するようにしたら解決しました。&lt;/p&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;IntelliJ の設定は複雑すぎる気がします……
とはいえ、新しい IDE を使う度に同じことを思っている気もします。&lt;/p&gt;
&lt;p&gt;シンプルにすればいいというわけではないですが、エラーメッセージはもう少し詳細に書いてほしいのと、
プロジェクト作成などある程度のことは CLI でもできるようにするなど、
問題の切り分けがやりやすくなればいいなと思いました。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[GnuPGのssh-agentエミュレータを使ってみました]]></title><description><![CDATA[今まではあまり気にしていなかったのですが、gh-pages のデプロイ時に2回パスフレーズを聞かれるのが
さすがに気になってしまい、 ssh-agent…]]></description><link>https://ny-a.github.io/blog2/2020-01/introduction-of-gpg-ssh-agent/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/introduction-of-gpg-ssh-agent/</guid><pubDate>Fri, 10 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;今まではあまり気にしていなかったのですが、gh-pages のデプロイ時に2回パスフレーズを聞かれるのが
さすがに気になってしまい、 ssh-agent を使うことにしました。&lt;/p&gt;
&lt;p&gt;前に何度か使っていたような記憶があるのですが、システム自体をあまり理解していなかったのもあり、
今の環境をセットアップするときには有効にしていませんでした。&lt;/p&gt;
&lt;h2&gt;設定&lt;/h2&gt;
&lt;p&gt;基本的には&lt;a href=&quot;https://wiki.archlinux.org/index.php/GnuPG#SSH_agent&quot;&gt;GnuPG - ArchWiki&lt;/a&gt; に従うだけです。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;~/.pam_environment&lt;/code&gt; で &lt;code class=&quot;language-text&quot;&gt;SSH_AUTH_SOCK&lt;/code&gt; の設定をして、Xorg で使う場合は TTY の設定をします。&lt;/p&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;ssh-agent と変わらずパスフレーズのキャッシュなどは普通に便利なのですが、
gpg-agent は内部で ssh-key を gpg-key としてインポートしていそうな感じですね。(追って調査します)&lt;/p&gt;
&lt;p&gt;gpg-key で ssh することも可能なので、行く行くは gpg-key にまとめてしまおうかなと思っています。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[dockerのインストールでハマりました]]></title><description><![CDATA[Docker…]]></description><link>https://ny-a.github.io/blog2/2020-01/problem-on-installing-docker/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/problem-on-installing-docker/</guid><pubDate>Thu, 09 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Docker のインストールは何度もやったことがあるのですが、稼働中のサーバー上でインストールした経験はなかったので、
(特殊な状況というか、あまり好ましくない状況ですが)ネットワーク周りで少しハマりました。&lt;/p&gt;
&lt;h2&gt;背景&lt;/h2&gt;
&lt;p&gt;稼働中のサービスがあるホストで、再起動は避けたい状況でした。&lt;/p&gt;
&lt;p&gt;そのサービスのアップデートをデプロイする前に、docker コンテナ化したアップデート済みサービスを
デプロイして検証しようとしていました。&lt;/p&gt;
&lt;p&gt;いやまあ検証環境分けろはそうなんですが……。&lt;/p&gt;
&lt;h2&gt;発生した問題&lt;/h2&gt;
&lt;p&gt;centos7 に docker をインストールし、docker-compose でコンテナを起動した所、
他のコンテナとはネットワークアクセス可能なのに、外部へのアクセスができない状況でした。&lt;/p&gt;
&lt;p&gt;(直接？の原因としては、 iptables の FORWARD チェーンが DROP になっていました。)&lt;/p&gt;
&lt;p&gt;iptables に docker 用のルールが自動で追加されるようなのですが(手元のマシンには追加されていました)、そのホストには
追加されていませんでした。&lt;/p&gt;
&lt;h2&gt;解決方法&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;systemctl restart docker&lt;/code&gt; を実行しました。終わり。&lt;/p&gt;
&lt;h2&gt;まとめ？&lt;/h2&gt;
&lt;p&gt;普通にホスト再起動してあげましょう。
というかメンテナンスしよ？&lt;/p&gt;</content:encoded></item><item><title><![CDATA[すごいHaskell楽しく学ぼうを読み始めました]]></title><description><![CDATA[関数型言語は Elm などいくつか触ったことがありますが、 Haskell はきちんと触っていなかったので
すごいH…]]></description><link>https://ny-a.github.io/blog2/2020-01/reading-learn-you-a-haskell-for-great-good/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/reading-learn-you-a-haskell-for-great-good/</guid><pubDate>Wed, 08 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;関数型言語は Elm などいくつか触ったことがありますが、 Haskell はきちんと触っていなかったので
すごいH本を読んでみました。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://learnyouahaskell.com/chapters&quot;&gt;英語版&lt;/a&gt;も公開されていますね。&lt;/p&gt;
&lt;h2&gt;型クラス&lt;/h2&gt;
&lt;p&gt;型クラスという名前は知っていましたが、具体的にどのようなものかは分かっていませんでした。&lt;/p&gt;
&lt;p&gt;サブクラスなども一貫性のある記述方法で、分かりやすいと感じました。&lt;/p&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;8章あたりまで斜め読みをしただけなのですが、もう Haskell は楽しいと感じています。&lt;/p&gt;
&lt;p&gt;あとはモナドトランスフォーマーなどの理解を……(？)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Svelteを使ってみました]]></title><description><![CDATA[9 Projects you can do to become a Frontend Master in 2020
をこなしていきます。今回は Svelte で ToDo アプリを作るやつを少しだけ進めてみました。 導入 The easiest way to get…]]></description><link>https://ny-a.github.io/blog2/2020-01/introduction-of-svelte/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/introduction-of-svelte/</guid><pubDate>Tue, 07 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;https://dev.to/simonholdorf/9-projects-you-can-do-to-become-a-frontend-master-in-2020-n2h&quot;&gt;9 Projects you can do to become a Frontend Master in 2020&lt;/a&gt;
をこなしていきます。今回は Svelte で ToDo アプリを作るやつを少しだけ進めてみました。&lt;/p&gt;
&lt;h2&gt;導入&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://svelte.dev/blog/the-easiest-way-to-get-started&quot;&gt;The easiest way to get started with Svelte&lt;/a&gt;
に書いてある通りですが、 &lt;code class=&quot;language-text&quot;&gt;degit&lt;/code&gt; を &lt;code class=&quot;language-text&quot;&gt;yarn&lt;/code&gt; で使うには少し注意が必要です。&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;npx degit&lt;/code&gt; の場合、2番目の引数はカレントディレクトリのフォルダ名になりますが、
(&lt;code class=&quot;language-text&quot;&gt;~/node_modules/.bin/degit&lt;/code&gt; を使う場合の) &lt;code class=&quot;language-text&quot;&gt;yarn degit&lt;/code&gt; の場合は、ホームディレクトリからのフォルダ名になるような気がします。&lt;/p&gt;
&lt;p&gt;そのため、代わりに以下のコマンドを実行するのでもよさそうです。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;git clone https://github.com/sveltejs/template my-svelte-project
cd my-svelte-project
rm -r .git
yarn
yarn dev&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;今回はデフォルトの &lt;code class=&quot;language-text&quot;&gt;rollup&lt;/code&gt; をそのまま使ってみましたが、 &lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt; も使えるようです。
また &lt;code class=&quot;language-text&quot;&gt;webpack&lt;/code&gt; でも試してみようかなと思います。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[ArchLinuxが壊れたときにまず試すことメモ]]></title><description><![CDATA[私は体に染みついていますが、他の人はそうではないと思うのでメモしておきます。 手順 USB key から起動して、いつも通りマウントして chroot して  する 自動化 まれによくあるので、installation 環境とデュアルブートにしておいて、fstab…]]></description><link>https://ny-a.github.io/blog2/2020-01/how-to-fix-broken-arch-linux/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/how-to-fix-broken-arch-linux/</guid><pubDate>Mon, 06 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;私は体に染みついていますが、他の人はそうではないと思うのでメモしておきます。&lt;/p&gt;
&lt;h2&gt;手順&lt;/h2&gt;
&lt;p&gt;USB key から起動して、いつも通りマウントして chroot して &lt;code class=&quot;language-text&quot;&gt;pacman -S linux&lt;/code&gt; する&lt;/p&gt;
&lt;h2&gt;自動化&lt;/h2&gt;
&lt;p&gt;まれによくあるので、installation 環境とデュアルブートにしておいて、fstabから自動マウントして、
いつも通りカーネルを再インストールするようにすると楽かもしれません。&lt;/p&gt;
&lt;p&gt;最近はほとんど壊れないのでモチベーションは低いですが……今後の課題とします。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[gatsbyを使い始めました]]></title><description><![CDATA[Jekyll を使い始めたところですが、早速浮気して Gatsby を使っていこうと思います。 9 Projects you can do to become a Frontend Master in 2020
に丁度 gatsby で blog…]]></description><link>https://ny-a.github.io/blog2/2020-01/introduction-of-gatsby/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/introduction-of-gatsby/</guid><pubDate>Sun, 05 Jan 2020 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Jekyll を使い始めたところですが、早速浮気して Gatsby を使っていこうと思います。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.to/simonholdorf/9-projects-you-can-do-to-become-a-frontend-master-in-2020-n2h&quot;&gt;9 Projects you can do to become a Frontend Master in 2020&lt;/a&gt;
に丁度 gatsby で blog を作るという項目があったので、これを順不同でこなしていこうと思います。&lt;/p&gt;
&lt;h2&gt;導入&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gatsby new&lt;/code&gt; を実行します。&lt;/p&gt;
&lt;h2&gt;gh-pages&lt;/h2&gt;
&lt;p&gt;公式ドキュメントの &lt;a href=&quot;https://www.gatsbyjs.org/docs/how-gatsby-works-with-github-pages/&quot;&gt;How Gatsby Works with GitHub Pages&lt;/a&gt;
を参考に、 &lt;code class=&quot;language-text&quot;&gt;yarn add -D gh-pages&lt;/code&gt; を実行して、 deploy スクリプトを追加します。&lt;/p&gt;
&lt;p&gt;また、 &lt;code class=&quot;language-text&quot;&gt;gatsby-config.js&lt;/code&gt; に &lt;code class=&quot;language-text&quot;&gt;pathPrefix&lt;/code&gt; を追加して、実際のレポジトリに合わせて設定します。&lt;/p&gt;
&lt;h2&gt;GitHub Pagesにデプロイ&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;yarn deploy&lt;/code&gt; を実行します。&lt;/p&gt;
&lt;p&gt;標準では自動で &lt;code class=&quot;language-text&quot;&gt;gh-pages&lt;/code&gt; ブランチに push されるようです。&lt;/p&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;内部で GraphQL を使っていてなるほど〜となりました。
今までこういった Static Site Generator を使ったことはなかったのですが、理想に近いものだと感じました。&lt;/p&gt;
&lt;p&gt;でも github-pages 公式サポートのある Jekyll の方が楽なんですよね……少し悩んでいます。&lt;/p&gt;
&lt;p&gt;後日 gatsby with TypeScript に挑戦したいと思っています。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[octokit 4.15.0がリリースされました]]></title><description><![CDATA[octokitをアップデートしました では octokit のリリースがまだだったので github から
直接インストールするようにしてアップデートしましたが、 4.15.0 がリリースされたのでそちらにアップデートします。 github…]]></description><link>https://ny-a.github.io/blog2/2020-01/released-octokit/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/released-octokit/</guid><pubDate>Sat, 04 Jan 2020 01:18:27 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;/blog2/2020-01/update-octokit/&quot;&gt;octokitをアップデートしました&lt;/a&gt; では octokit のリリースがまだだったので github から
直接インストールするようにしてアップデートしましたが、 4.15.0 がリリースされたのでそちらにアップデートします。&lt;/p&gt;
&lt;h2&gt;github 指定を削除&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;gem &amp;quot;octokit&amp;quot;, github: &amp;quot;octokit/octokit.rb&amp;quot;, ref: &amp;quot;ae5838a&amp;quot;&lt;/code&gt; を削除して、 &lt;code class=&quot;language-text&quot;&gt;bundle update&lt;/code&gt; を実行します。&lt;/p&gt;
&lt;p&gt;これで faraday 1.0 系でもエラーにならずに正しく実行できるようになりました。&lt;/p&gt;
&lt;p&gt;リリースありがとうございます！&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jekyllのタイムゾーン設定を変更しました]]></title><description><![CDATA[octokitをアップデートしました を投稿したのが01時
だったのですが、前日の投稿として表示されてしまいました。 原因・JST設定 GitHub の CI でのデフォルトのタイムゾーンが JST ではないからですね。 Jekyll の Configuration…]]></description><link>https://ny-a.github.io/blog2/2020-01/change-jekyll-timezone/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/change-jekyll-timezone/</guid><pubDate>Sat, 04 Jan 2020 01:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;/blog2/2020-01/update-octokit/&quot;&gt;octokitをアップデートしました&lt;/a&gt; を投稿したのが01時
だったのですが、前日の投稿として表示されてしまいました。&lt;/p&gt;
&lt;h2&gt;原因・JST設定&lt;/h2&gt;
&lt;p&gt;GitHub の CI でのデフォルトのタイムゾーンが JST ではないからですね。&lt;/p&gt;
&lt;p&gt;Jekyll の &lt;a href=&quot;https://jekyllrb.com/docs/configuration/options/&quot;&gt;Configuration Options&lt;/a&gt; を確認すると、
Timezone を設定できるようです。 &lt;code class=&quot;language-text&quot;&gt;Asia/Tokyo&lt;/code&gt; に設定しました。&lt;/p&gt;
&lt;h2&gt;UTC に揃える&lt;/h2&gt;
&lt;p&gt;全部 UTC に揃えたら楽だとは思いますが、朝09時に日付が変わるのはまだ慣れないので……
と思ったのですが、 gatsby の方で面倒だったのでやっぱり UTC に揃えることにしました。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[octokitをアップデートしました]]></title><description><![CDATA[Jekyllを使い始めました でセットアップ時に
エラーが出ていたので調査しました。 原因  gem の 1.0 がリリースされたことが原因ですが、リリースされたのが丁度01/01でした。
情報が少なかったわけです。 依存ツリーとしては github-pages github…]]></description><link>https://ny-a.github.io/blog2/2020-01/update-octokit/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/update-octokit/</guid><pubDate>Fri, 03 Jan 2020 01:06:28 GMT</pubDate><content:encoded>&lt;p&gt;&lt;a href=&quot;/blog2/2020-01/introduction-of-jekyll/&quot;&gt;Jekyllを使い始めました&lt;/a&gt; でセットアップ時に
エラーが出ていたので調査しました。&lt;/p&gt;
&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;faraday&lt;/code&gt; gem の 1.0 がリリースされたことが原因ですが、リリースされたのが丁度01/01でした。
情報が少なかったわけです。&lt;/p&gt;
&lt;p&gt;依存ツリーとしては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github-pages&lt;/li&gt;
&lt;li&gt;github-pages-health-check, jekyll-gist, jekyll-github-metadata&lt;/li&gt;
&lt;li&gt;octokit&lt;/li&gt;
&lt;li&gt;(sawyer)&lt;/li&gt;
&lt;li&gt;faraday&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となっているようです。
また、 &lt;code class=&quot;language-text&quot;&gt;~&amp;gt; 0&lt;/code&gt; のような、1系が入らないバージョン指定もないようです。&lt;/p&gt;
&lt;h2&gt;各gemのissueの確認&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/github/pages-gem/issues/665&quot;&gt;issue github/pages-gem#665&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/octokit/octokit.rb/pull/1154&quot;&gt;PR octokit/octokit.rb#1154&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;どうやら原因は octokit にあるようです。
修正の PR 自体は master ブランチにマージされていて、リリースを待つだけのようです。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/octokit/octokit.rb/issues/1177&quot;&gt;issue octokit/octokit.rb#1177&lt;/a&gt; によると、来週にはリリースする予定ということです。&lt;/p&gt;
&lt;h2&gt;workaround&lt;/h2&gt;
&lt;p&gt;01/01 に書いたように faraday の 0.17 を指定することでもエラーは出なくなりますが、
octokit を github から取得するようにしても対応できます。&lt;/p&gt;
&lt;p&gt;具体的には、&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;gem &amp;quot;octokit&amp;quot;, github: &amp;quot;octokit/octokit.rb&amp;quot;, ref: &amp;quot;ae5838a&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;を Gemfile に追加することで、 faraday の 1系を使えるようになります。&lt;/p&gt;
&lt;p&gt;(&lt;code class=&quot;language-text&quot;&gt;ae5838a&lt;/code&gt; 以降であればいいので、 &lt;code class=&quot;language-text&quot;&gt;branch: &amp;quot;master&amp;quot;&lt;/code&gt; などでも問題ないです。)&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;octokit のメンテナさん、リリース頑張ってください！いつもありがとうございます。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Progateを始めました]]></title><description><![CDATA[最近 Twitter で Progate という名前をよく見かけるので、 Go のレッスンを始めてみました。 レッスン1 やるだけ レッスン2 1枚目のスライドの内容とは関係ない部分ですが、Go のレッスン1、 レッスン…]]></description><link>https://ny-a.github.io/blog2/2020-01/introduction-of-progate/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/introduction-of-progate/</guid><pubDate>Thu, 02 Jan 2020 14:50:52 GMT</pubDate><content:encoded>&lt;p&gt;最近 Twitter で Progate という名前をよく見かけるので、 Go のレッスンを始めてみました。&lt;/p&gt;
&lt;h2&gt;レッスン1&lt;/h2&gt;
&lt;p&gt;やるだけ&lt;/p&gt;
&lt;h2&gt;レッスン2&lt;/h2&gt;
&lt;p&gt;1枚目のスライドの内容とは関係ない部分ですが、Go のレッスン1、 レッスン2 を
それぞれ &lt;code class=&quot;language-text&quot;&gt;GoⅠ&lt;/code&gt; と &lt;code class=&quot;language-text&quot;&gt;GoⅡ&lt;/code&gt; と表わしているのが見た目に紛らわしいなと思いました。&lt;/p&gt;
&lt;p&gt;はい、やるだk……有料プランの説明が出てきました。&lt;/p&gt;
&lt;p&gt;そういえば始めの方のレッスンのみ無料ということだったので、とりあえず無料のレッスンを進めていきます。&lt;/p&gt;
&lt;h2&gt;レッスン3, レッスン4&lt;/h2&gt;
&lt;p&gt;やるだけ&lt;/p&gt;
&lt;h2&gt;感想&lt;/h2&gt;
&lt;p&gt;Go、…… Better C？&lt;/p&gt;
&lt;p&gt;関数型が好きです、よろしくお願いします。&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Jekyllを使い始めました]]></title><description><![CDATA[一年の計は元旦にあり！ …… ………… ……………… ( ˘ω˘ ) 元日なのでセーフということで…… Jekyll をセットアップしてブログを書き始めました。
今年は毎日何かアウトプットすることが目標です。 Jekyll…]]></description><link>https://ny-a.github.io/blog2/2020-01/introduction-of-jekyll/</link><guid isPermaLink="false">https://ny-a.github.io/blog2/2020-01/introduction-of-jekyll/</guid><pubDate>Wed, 01 Jan 2020 11:23:40 GMT</pubDate><content:encoded>&lt;p&gt;一年の計は元旦にあり！&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;
&lt;p&gt;…………&lt;/p&gt;
&lt;p&gt;………………&lt;/p&gt;
&lt;p&gt;( ˘ω˘ )&lt;/p&gt;
&lt;p&gt;元日なのでセーフということで……&lt;/p&gt;
&lt;p&gt;Jekyll をセットアップしてブログを書き始めました。
今年は毎日何かアウトプットすることが目標です。&lt;/p&gt;
&lt;h2&gt;Jekyll のセットアップ&lt;/h2&gt;
&lt;p&gt;セットアップの方法は、基本的に&lt;a href=&quot;https://jekyllrb.com/docs/github-pages/&quot;&gt;公式の docs&lt;/a&gt;に書いてある通りです。&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;jekyll new blog
cd blog
sed -i -e &amp;#39;s/^gem &amp;quot;jekyll&amp;quot;/# &amp;amp;/&amp;#39; -e &amp;#39;/gem &amp;quot;github-pages&amp;quot;/s/^#//&amp;#39; -e &amp;#39;$a gem &amp;quot;faraday&amp;quot;, &amp;quot;~&amp;gt; 0.17&amp;quot;&amp;#39; Gemfile
bundle update
sed -i -e &amp;#39;s#baseurl: &amp;quot;&amp;quot;#baseurl: &amp;quot;/blog&amp;quot;#&amp;#39; _config.yml
bundle exec jekyll serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1つ問題があり、数ヶ月前に同様の手順を踏んだときから &lt;code class=&quot;language-text&quot;&gt;faraday&lt;/code&gt; が 1.0 にアップデートされたようで、実行時に
&lt;code class=&quot;language-text&quot;&gt;jekyll 3.8.5 | Error:  uninitialized constant Faraday::Error::ClientError&lt;/code&gt; というエラーが出るようになっていました。&lt;/p&gt;
&lt;p&gt;そのため、 workaround として &lt;code class=&quot;language-text&quot;&gt;faraday&lt;/code&gt; を 0.17 系を使用するようにしました。&lt;/p&gt;
&lt;h2&gt;Happy new year!&lt;/h2&gt;
&lt;p&gt;&amp;#x26; Happy development!!&lt;/p&gt;</content:encoded></item></channel></rss>