{"version":3,"sources":["webpack:///./src/templates/index.tsx"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","location","map","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","alignItems","listStyle","padding","rel","Array","from","length","_","i","margin","textDecoration","color","background","React","Component","pageQuery"],"mappings":"6QAmBMA,E,gLACFC,OAAA,WAAS,IACEC,EAAQC,KAAKC,MAAbF,KACDG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAHhC,EAI2BR,KAAKC,MAAMQ,YAApCC,EAJF,EAIEA,YAAaC,EAJf,EAIeA,SACdC,EAA0B,IAAhBF,EACVG,EAASH,IAAgBC,EACzBG,EAAWJ,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGK,WAC3DC,GAAYN,EAAc,GAAGK,WAEnC,OACI,kBAAC,IAAD,CAAQE,SAAUjB,KAAKC,MAAMgB,SAAUZ,MAAOH,GAC1C,kBAAC,IAAD,CAAKG,MAAM,cACX,kBAAC,IAAD,MACCC,EAAMY,KAAI,YAAY,IAAVC,EAAU,EAAVA,KACHd,EAAQc,EAAKC,YAAYf,OAASc,EAAKE,OAAOC,KACpD,OACI,6BAASC,IAAKJ,EAAKE,OAAOC,MACtB,gCACI,wBACIE,MAAO,CACHC,aAAcC,YAAO,OAGzB,kBAAC,OAAD,CAAMF,MAAO,CAACG,UAAW,QAASC,GAAIT,EAAKE,OAAOC,MAC7CjB,IAGT,+BAAQc,EAAKC,YAAYS,OAE7B,iCACI,uBACIC,wBAAyB,CACrBC,OAAQZ,EAAKa,gBAOrC,wBACIR,MAAO,CACHS,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,WAAY,SACZC,UAAW,OACXC,QAAS,KAGX1B,GACE,kBAAC,OAAD,CAAMgB,GAAId,EAAUyB,IAAI,QAAxB,mBAIHC,MAAMC,KAAK,CAACC,OAAQ/B,IAAW,SAACgC,EAAGC,GAAJ,OAC5B,wBACIrB,IAAG,qBAAsBqB,EAAI,GAC7BpB,MAAO,CACHqB,OAAQ,IAGZ,kBAAC,OAAD,CACIjB,GAAE,KAAY,IAANgB,EAAU,GAAKA,EAAI,GAC3BpB,MAAO,CACHc,QAASZ,YAAO,KAChBoB,eAAgB,OAChBC,MAAOH,EAAI,IAAMlC,EAAc,UAAY,GAC3CsC,WAAYJ,EAAI,IAAMlC,EAAc,UAAY,KAGnDkC,EAAI,QAIf/B,GACE,kBAAC,OAAD,CAAMe,GAAIZ,EAAUuB,IAAI,QAAxB,kB,GA7EAU,IAAMC,WAuFfrD,YAwBR,IAAMsD,EAAY","file":"component---src-templates-index-tsx-1a8359e5abcc73eca9f9.js","sourcesContent":["import React from 'react'\nimport {graphql, Link} from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout, {LocationType} from '../components/layout'\nimport SEO from '../components/seo'\nimport {rhythm} from '../utils/typography'\n\ntype BlogIndexProps = {\n    data: PageQueryType,\n    location: LocationType,\n    pageContext: {\n        limit: number,\n        skip: number,\n        numPages: number,\n        currentPage: number,\n    }\n}\n\nclass BlogIndex extends React.Component<BlogIndexProps> {\n    render() {\n        const {data} = this.props\n        const siteTitle = data.site.siteMetadata.title\n        const posts = data.allMarkdownRemark.edges\n        const {currentPage, numPages} = this.props.pageContext\n        const isFirst = currentPage === 1\n        const isLast = currentPage === numPages\n        const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n        const nextPage = (currentPage + 1).toString()\n\n        return (\n            <Layout location={this.props.location} title={siteTitle}>\n                <SEO title=\"All posts\"/>\n                <Bio/>\n                {posts.map(({node}) => {\n                    const title = node.frontmatter.title || node.fields.slug\n                    return (\n                        <article key={node.fields.slug}>\n                            <header>\n                                <h3\n                                    style={{\n                                        marginBottom: rhythm(1 / 4),\n                                    }}\n                                >\n                                    <Link style={{boxShadow: 'none'}} to={node.fields.slug}>\n                                        {title}\n                                    </Link>\n                                </h3>\n                                <small>{node.frontmatter.date}</small>\n                            </header>\n                            <section>\n                                <p\n                                    dangerouslySetInnerHTML={{\n                                        __html: node.excerpt,\n                                    }}\n                                />\n                            </section>\n                        </article>\n                    )\n                })}\n                <ul\n                    style={{\n                        display: 'flex',\n                        flexWrap: 'wrap',\n                        justifyContent: 'space-between',\n                        alignItems: 'center',\n                        listStyle: 'none',\n                        padding: 0,\n                    }}\n                >\n                    {!isFirst && (\n                        <Link to={prevPage} rel=\"prev\">\n                            ← Previous Page\n                        </Link>\n                    )}\n                    {Array.from({length: numPages}, (_, i) => (\n                        <li\n                            key={`pagination-number${i + 1}`}\n                            style={{\n                                margin: 0,\n                            }}\n                        >\n                            <Link\n                                to={`/${i === 0 ? '' : i + 1}`}\n                                style={{\n                                    padding: rhythm(1 / 4),\n                                    textDecoration: 'none',\n                                    color: i + 1 === currentPage ? '#ffffff' : '',\n                                    background: i + 1 === currentPage ? '#007acc' : '',\n                                }}\n                            >\n                                {i + 1}\n                            </Link>\n                        </li>\n                    ))}\n                    {!isLast && (\n                        <Link to={nextPage} rel=\"next\">\n                            Next Page →\n                        </Link>\n                    )}\n                </ul>\n            </Layout>\n        )\n    }\n}\n\nexport default BlogIndex\n\ntype PageQueryType = {\n    site: {\n        siteMetadata: {\n            title: string,\n        }\n    },\n    allMarkdownRemark: {\n        edges: [{\n            node: {\n                excerpt: string,\n                fields: {\n                    slug: string,\n                },\n                frontmatter: {\n                    date: string,\n                    title: string,\n                }\n            }\n        }]\n    }\n}\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 50)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}