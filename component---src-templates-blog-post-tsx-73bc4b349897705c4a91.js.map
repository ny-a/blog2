{"version":3,"sources":["webpack:///./src/components/bio.tsx","webpack:///./src/templates/blog-post.tsx"],"names":["Bio","site","siteMetadata","author","social","style","display","href","twitter","BlogPostTemplate","render","post","this","props","data","markdownRemark","siteTitle","title","pageContext","previous","next","location","frontmatter","description","excerpt","marginTop","rhythm","marginBottom","scale","date","dangerouslySetInnerHTML","__html","html","flexWrap","justifyContent","listStyle","padding","to","fields","slug","rel","React","pageQuery"],"mappings":"yPAqDeA,IAhCH,WACR,IADc,EACU,OAaMC,KAAKC,aAA5BC,EAdO,EAcPA,OAAQC,EAdD,EAcCA,OACf,OACI,uBACIC,MAAO,CACHC,QAAS,SAGb,uCACe,8BAASH,GADxB,QAGI,qBAAGI,KAAI,uBAAyBH,EAAOI,SAAvC,WACaJ,EAAOI,a,6KCpB9BC,E,gLACFC,OAAA,WACI,IAAMC,EAAOC,KAAKC,MAAMC,KAAKC,eACvBC,EAAYJ,KAAKC,MAAMC,KAAKb,KAAKC,aAAae,MAF/C,EAGoBL,KAAKC,MAAMK,YAA7BC,EAHF,EAGEA,SAAUC,EAHZ,EAGYA,KAEjB,OACI,gBAAC,IAAD,CAAQC,SAAUT,KAAKC,MAAMQ,SAAUJ,MAAOD,GAC1C,gBAAC,IAAD,CACIC,MAAON,EAAKW,YAAYL,MACxBM,YAAaZ,EAAKa,UAEtB,+BACI,8BACI,sBACInB,MAAO,CACHoB,UAAWC,YAAO,GAClBC,aAAc,IAGjBhB,EAAKW,YAAYL,OAEtB,qBACIZ,MAAK,iBACEuB,aAAM,IADR,CAEDtB,QAAS,QACTqB,aAAcD,YAAO,MAGxBf,EAAKW,YAAYO,OAG1B,2BAASC,wBAAyB,CAACC,OAAQpB,EAAKqB,QAChD,sBACI3B,MAAO,CACHsB,aAAcD,YAAO,MAG7B,8BACI,gBAAC,IAAD,QAIR,2BACI,sBACIrB,MAAO,CACHC,QAAS,OACT2B,SAAU,OACVC,eAAgB,gBAChBC,UAAW,OACXC,QAAS,IAGb,0BACKjB,GACG,gBAAC,OAAD,CAAMkB,GAAIlB,EAASmB,OAAOC,KAAMC,IAAI,QAApC,KACOrB,EAASG,YAAYL,QAIpC,0BACKG,GACG,gBAAC,OAAD,CAAMiB,GAAIjB,EAAKkB,OAAOC,KAAMC,IAAI,QAC3BpB,EAAKE,YAAYL,MADtB,W,GA9DDwB,aA0EhBhC,YAmBR,IAAMiC,EAAY","file":"component---src-templates-blog-post-tsx-73bc4b349897705c4a91.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport * as React from \"react\"\nimport {graphql, useStaticQuery} from \"gatsby\"\n\ntype QueryType = {\n    site: {\n        siteMetadata: {\n            author: string,\n            social: {\n                twitter: string,\n            }\n        }\n    }\n}\n\nconst Bio = () => {\n    const data: QueryType = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n    const {author, social} = data.site.siteMetadata\n    return (\n        <div\n            style={{\n                display: `flex`,\n            }}\n        >\n            <p>\n                Written by <strong>{author}</strong>.\n                {` `}\n                <a href={`https://twitter.com/${social.twitter}`}>\n                    Twitter@{social.twitter}\n                </a>\n            </p>\n        </div>\n    )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport {graphql, Link} from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout, {LocationType} from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport {rhythm, scale} from \"../utils/typography\"\n\ntype BlogPostResultNode = {\n    fields: {\n        slug: string,\n    },\n    frontmatter: {\n        title: string,\n    }\n}\n\ntype BlogPostTemplateProps = {\n    data: PageQueryResult,\n    pageContext: {\n        previous: BlogPostResultNode,\n        next: BlogPostResultNode,\n    },\n    location: LocationType,\n}\n\nclass BlogPostTemplate extends React.Component<BlogPostTemplateProps> {\n    render() {\n        const post = this.props.data.markdownRemark\n        const siteTitle = this.props.data.site.siteMetadata.title\n        const {previous, next} = this.props.pageContext\n\n        return (\n            <Layout location={this.props.location} title={siteTitle}>\n                <SEO\n                    title={post.frontmatter.title}\n                    description={post.excerpt}\n                />\n                <article>\n                    <header>\n                        <h1\n                            style={{\n                                marginTop: rhythm(1),\n                                marginBottom: 0,\n                            }}\n                        >\n                            {post.frontmatter.title}\n                        </h1>\n                        <p\n                            style={{\n                                ...scale(-1 / 5),\n                                display: `block`,\n                                marginBottom: rhythm(1),\n                            }}\n                        >\n                            {post.frontmatter.date}\n                        </p>\n                    </header>\n                    <section dangerouslySetInnerHTML={{__html: post.html}}/>\n                    <hr\n                        style={{\n                            marginBottom: rhythm(1),\n                        }}\n                    />\n                    <footer>\n                        <Bio/>\n                    </footer>\n                </article>\n\n                <nav>\n                    <ul\n                        style={{\n                            display: `flex`,\n                            flexWrap: `wrap`,\n                            justifyContent: `space-between`,\n                            listStyle: `none`,\n                            padding: 0,\n                        }}\n                    >\n                        <li>\n                            {previous && (\n                                <Link to={previous.fields.slug} rel=\"prev\">\n                                    ← {previous.frontmatter.title}\n                                </Link>\n                            )}\n                        </li>\n                        <li>\n                            {next && (\n                                <Link to={next.fields.slug} rel=\"next\">\n                                    {next.frontmatter.title} →\n                                </Link>\n                            )}\n                        </li>\n                    </ul>\n                </nav>\n            </Layout>\n        )\n    }\n}\n\nexport default BlogPostTemplate\n\ntype PageQueryResult = {\n    site: {\n        siteMetadata: {\n            title: string,\n        }\n    },\n    markdownRemark: {\n        id: string,\n        excerpt: string,\n        html: string,\n        frontmatter: {\n            title: string,\n            date: string,\n        }\n    }\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n      }\n    }\n  }\n`\n"],"sourceRoot":""}