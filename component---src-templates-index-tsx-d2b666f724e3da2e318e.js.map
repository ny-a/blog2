{"version":3,"sources":["webpack:///./src/templates/index.tsx"],"names":["BlogIndex","render","data","this","props","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","edges","pageContext","currentPage","numPages","isFirst","isOldest","newerPage","toString","olderPage","location","map","node","frontmatter","fields","slug","key","style","marginBottom","rhythm","boxShadow","to","date","dangerouslySetInnerHTML","__html","excerpt","display","flexWrap","justifyContent","alignItems","listStyle","padding","rel","Array","from","length","_","i","margin","textDecoration","color","background","React","pageQuery"],"mappings":"oQAmBMA,E,gLACJC,OAAA,WAAS,IACAC,EAAQC,KAAKC,MAAbF,KACDG,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAQP,EAAKQ,kBAAkBC,MAH9B,EAIyBR,KAAKC,MAAMQ,YAApCC,EAJA,EAIAA,YAAaC,EAJb,EAIaA,SACdC,EAA0B,IAAhBF,EACVG,EAAWH,IAAgBC,EAC3BG,EAAYJ,EAAc,GAAM,EAAI,KAAOA,EAAc,GAAGK,WAC5DC,GAAaN,EAAc,GAAGK,WAEpC,OACE,gBAAC,IAAD,CAAQE,SAAUjB,KAAKC,MAAMgB,SAAUZ,MAAOH,GAC5C,gBAAC,IAAD,CAAKG,MAAM,cACX,gBAAC,IAAD,MACCC,EAAMY,KAAI,YAAY,IAAVC,EAAU,EAAVA,KACLd,EAAQc,EAAKC,YAAYf,OAASc,EAAKE,OAAOC,KACpD,OACE,2BAASC,IAAKJ,EAAKE,OAAOC,MACxB,8BACE,sBACEE,MAAO,CACLC,aAAcC,YAAO,OAGvB,gBAAC,OAAD,CAAMF,MAAO,CAACG,UAAW,QAASC,GAAIT,EAAKE,OAAOC,MAC/CjB,IAGL,6BAAQc,EAAKC,YAAYS,OAE3B,+BACE,qBACEC,wBAAyB,CACvBC,OAAQZ,EAAKa,gBAOzB,sBACER,MAAO,CACLS,QAAS,OACTC,SAAU,OACVC,eAAgB,gBAChBC,WAAY,SACZC,UAAW,OACXC,QAAS,KAGTzB,GACA,gBAAC,OAAD,CAAMe,GAAIZ,EAAWuB,IAAI,QAAzB,gBAIDC,MAAMC,KAAK,CAACC,OAAQ/B,IAAW,SAACgC,EAAGC,GAAJ,OAC9B,sBACErB,IAAG,qBAAsBZ,EAAWiC,GACpCpB,MAAO,CACLqB,OAAQ,IAGV,gBAAC,OAAD,CACEjB,GAAE,KAAMjB,EAAWiC,GAAM,EAAI,GAAKjC,EAAWiC,GAC7CpB,MAAO,CACLc,QAASZ,YAAO,KAChBoB,eAAgB,OAChBC,MAAOpC,EAAWiC,IAAMlC,EAAc,UAAY,GAClDsC,WAAYrC,EAAWiC,IAAMlC,EAAc,UAAY,KAGxDC,EAAWiC,QAIhBhC,GACA,gBAAC,OAAD,CAAMgB,GAAId,EAAWyB,IAAI,QAAzB,mB,GA7EYU,aAuFTpD,YAwBR,IAAMqD,EAAY","file":"component---src-templates-index-tsx-d2b666f724e3da2e318e.js","sourcesContent":["import * as React from 'react'\nimport {graphql, Link} from 'gatsby'\n\nimport Bio from '../components/bio'\nimport Layout, {LocationType} from '../components/layout'\nimport SEO from '../components/seo'\nimport {rhythm} from '../utils/typography'\n\ntype BlogIndexProps = {\n  data: PageQueryType,\n  location: LocationType,\n  pageContext: {\n    limit: number,\n    skip: number,\n    numPages: number,\n    currentPage: number,\n  }\n}\n\nclass BlogIndex extends React.Component<BlogIndexProps> {\n  render() {\n    const {data} = this.props\n    const siteTitle = data.site.siteMetadata.title\n    const posts = data.allMarkdownRemark.edges\n    const {currentPage, numPages} = this.props.pageContext\n    const isFirst = currentPage === 1\n    const isOldest = currentPage === numPages\n    const newerPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString()\n    const olderPage = (currentPage + 1).toString()\n\n    return (\n      <Layout location={this.props.location} title={siteTitle}>\n        <SEO title=\"All posts\"/>\n        <Bio/>\n        {posts.map(({node}) => {\n          const title = node.frontmatter.title || node.fields.slug\n          return (\n            <article key={node.fields.slug}>\n              <header>\n                <h3\n                  style={{\n                    marginBottom: rhythm(1 / 4),\n                  }}\n                >\n                  <Link style={{boxShadow: 'none'}} to={node.fields.slug}>\n                    {title}\n                  </Link>\n                </h3>\n                <small>{node.frontmatter.date}</small>\n              </header>\n              <section>\n                <p\n                  dangerouslySetInnerHTML={{\n                    __html: node.excerpt,\n                  }}\n                />\n              </section>\n            </article>\n          )\n        })}\n        <ul\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            alignItems: 'center',\n            listStyle: 'none',\n            padding: 0,\n          }}\n        >\n          {!isOldest && (\n            <Link to={olderPage} rel=\"next\">\n              ← Older Page\n            </Link>\n          )}\n          {Array.from({length: numPages}, (_, i) => (\n            <li\n              key={`pagination-number${numPages - i}`}\n              style={{\n                margin: 0,\n              }}\n            >\n              <Link\n                to={`/${numPages - i === 1 ? '' : numPages - i}`}\n                style={{\n                  padding: rhythm(1 / 4),\n                  textDecoration: 'none',\n                  color: numPages - i === currentPage ? '#ffffff' : '',\n                  background: numPages - i === currentPage ? '#007acc' : '',\n                }}\n              >\n                {numPages - i}\n              </Link>\n            </li>\n          ))}\n          {!isFirst && (\n            <Link to={newerPage} rel=\"prev\">\n              Newer Page →\n            </Link>\n          )}\n        </ul>\n      </Layout>\n    )\n  }\n}\n\nexport default BlogIndex\n\ntype PageQueryType = {\n  site: {\n    siteMetadata: {\n      title: string,\n    }\n  },\n  allMarkdownRemark: {\n    edges: [{\n      node: {\n        excerpt: string,\n        fields: {\n          slug: string,\n        },\n        frontmatter: {\n          date: string,\n          title: string,\n        }\n      }\n    }]\n  }\n}\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 50)\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}