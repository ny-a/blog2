{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2020-02/create-new-gpg-key/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"4978cb66-d40b-5700-8f32-bb4defd354d3","excerpt":"Yubikey もあることですし、そろそろ GPG や SSH の秘密鍵を統一しようと思います。\nGPGで自分用の秘密鍵を…","html":"<p>Yubikey もあることですし、そろそろ GPG や SSH の秘密鍵を統一しようと思います。\n<a href=\"http://joemphilips.com/post/gpg_memo/\">GPGで自分用の秘密鍵を1つに統一する</a>\nを参考に進めていきました。</p>\n<p>上記記事ではエアギャップコンピュータが推奨されていますが、今回はマスターキーのバックアップの\n利便性のため、ネットワークに接続した状態で行いました。\n<a href=\"https://www.qubes-os.org/\">QUBES OS</a> はよさそうですね。 Fedora ベースなのが\n少し気になるといえばそうですが……(ArchLinux に慣れているため)。</p>\n<p>さて、普段使いの環境にはマスターキーの秘密鍵は置いておきたくないので、\nマスターキーの生成は別の環境で行います。\nバックアップの利便性なども考えて、 LUKS で暗号化したパーティションをファイルに保存します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">dd if=/dev/zero of=encrypted_partition.img bs=1M count=64\nsudo cryptsetup luksFormat -i 5000 --use-random encrypted_partition.img\n# type &#39;YES&#39; and set password\nsudo cryptsetup luksOpen encrypted_partition.img gpg_container\nsudo mkfs.ext4 /dev/mapper/gpg_container\nsudo mount /dev/mapper/gpg_container /mnt\nsudo mkdir /mnt/.gnupg\nsudo chown [current_user] /mnt/.gnupg</code></pre></div>\n<p>GPG の操作は今作成した <code class=\"language-text\">/mnt/.gnupg</code> を GNUPGHOME に設定して行います。\n必要なだけマスターキーとサブキーを作成していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">GNUPGHOME=/mnt/.gnupg gpg --full-gen-key</code></pre></div>\n<p>作成が終わったら、サブキーだけをエクスポートします。キーの fingerprint は <code class=\"language-text\">gpg -K</code> で確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">GNUPGHOME=/mnt/.gnupg gpg --output [exported-file] --export-secret-subkeys [fingerprint]</code></pre></div>\n<p>エクスポートしたファイルを scp などで普段使う環境にコピーしたら、インポートして信頼します。\n今自分で作成したキーなので、信頼度は 5 (I trust ultimately) でよいでしょう。</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">gpg --import [exported-file]\ngpg --edit-key [fingerprint]\n    &gt; trust\n    &gt; 5 # I trust ultimately\n    &gt; save</code></pre></div>\n<p>あとは、 <code class=\"language-text\">gpg -K --with-keygrip</code> で ssh に使いたいキーの keygrip を確認して、 <code class=\"language-text\">~/.gnupg/sshcontrol</code> に追加します。\n<code class=\"language-text\">~/.ssh/config</code> の <code class=\"language-text\">IdentityFile</code> でキーを指定する場合は、 <code class=\"language-text\">gpg -K --with-subkey-fingerprint</code> でサブキーの\nfingerprint を確認して、 <code class=\"language-text\">gpg --export-ssh-key [fingerprint] &gt; ~/.ssh/id_something.pub</code> を実行します。\n<code class=\"language-text\">IdentityFile</code> には今作成した <code class=\"language-text\">id_something.pub</code> を指定してください。</p>\n<p>gpg-agent を ssh-agent として使う方法は\n<a href=\"/blog2/2020-01/introduction-of-gpg-ssh-agent/\">GnuPGのssh-agentエミュレータを使ってみました</a>\nに書いた通りです。</p>\n<p>addkey をする場合やサブキーの有効期限を変更する場合などはマスターキーが必要になりますが、\nそれまではマスターキーの秘密鍵がない状態でうまく機能するでしょう。\n将来的にはオフラインのマシン上で行いたいですが、ひとまず普段から GPG を使う習慣をつけて\n慣れておこうと思っています。</p>","frontmatter":{"title":"新しいGPGキーを作成しました","date":"February 04, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"2020-02/create-new-gpg-key/","previous":{"fields":{"slug":"2020-02/cryptsetup-benchmark-on-raspi/"},"frontmatter":{"title":"RasPiでcryptsetup benchmarkを実行してみました"}},"next":null}}}