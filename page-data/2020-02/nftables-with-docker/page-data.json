{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2020-02/nftables-with-docker/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"6a50de97-7de6-5479-8189-97bdea342e0d","excerpt":"Linux 3.13 から利用可能な、 iptables を置き換える(ことを目的とした)パケット分類フレームワークの(ファイアーウォール？)\nnftables を、 docker を使っている環境で使ってみました。 インストール・有効化 Docker から使うには、 iptables…","html":"<p>Linux 3.13 から利用可能な、 iptables を置き換える(ことを目的とした)パケット分類フレームワークの(ファイアーウォール？)\nnftables を、 docker を使っている環境で使ってみました。</p>\n<h2>インストール・有効化</h2>\n<p>Docker から使うには、 iptables の互換フロントエンドをインストールする必要があります。\nnftables と一緒にインストールするには、以下を実行します。\n(<code class=\"language-text\">iptables-nft</code> は <code class=\"language-text\">iptables</code> を置き換えます。)</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">sudo pacman -S nftables iptables-nft</code></pre></div>\n<p><code class=\"language-text\">nftables.service</code> を起動すると、 <code class=\"language-text\">/etc/nftables.conf</code> から設定を読み込みます。\n起動・自動的に起動するようにするには、以下を実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">sudo systemctl enbale --now nftables</code></pre></div>\n<p>ArchLinux の nftables パッケージの <code class=\"language-text\">etc/nftables.conf</code> には、\nシンプルでセキュアなファイアーウォールが設定されています。\n1:0.9.3-1 時点での設定内容は以下の通りです。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#!/usr/bin/nft -f\n# ipv4/ipv6 Simple &amp; Safe Firewall\n# you can find examples in /usr/share/nftables/\n\ntable inet filter {\n  chain input {\n    type filter hook input priority 0;\n\n    # allow established/related connections\n    ct state {established, related} accept\n\n    # early drop of invalid connections\n    ct state invalid drop\n\n    # allow from loopback\n    iifname lo accept\n\n    # allow icmp\n    ip protocol icmp accept\n    ip6 nexthdr icmpv6 accept\n\n    # allow ssh\n    tcp dport ssh accept\n\n    # everything else\n    reject with icmpx type port-unreachable\n  }\n  chain forward {\n    type filter hook forward priority 0;\n    drop\n  }\n  chain output {\n    type filter hook output priority 0;\n  }\n\n}\n\n# vim:set ts=2 sw=2 et:</code></pre></div>\n<h2>Docker を使用するための設定</h2>\n<p>標準のままだと、 Docker コンテナとの通信は forward チェインのルールにより drop されてしまいます。\ndocker エンジンによって作成される <code class=\"language-text\">DOCKER-USER</code> チェインのパケットを accept するには、以下のコマンドを実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\"># ip ファミリーに filter テーブルを作成し、 DOCKER-USER チェインを追加する\n$ sudo nft add table ip filter                                                                                                                                                                          :(\n$ sudo nft add chain ip filter DOCKER-USER\n$ sudo nft add rule ip filter DOCKER-USER mark set 1\n# inet filter forward の drop ルールの handle を確認する (この場合は `handle 12`)\n$ sudo nft list ruleset -a\ntable inet filter { # handle 25\n\tchain input { # handle 1\n\t\ttype filter hook input priority filter; policy accept;\n\t\tct state { established, related } accept # handle 5\n\t\tct state invalid drop # handle 6\n\t\tiifname &quot;lo&quot; accept # handle 7\n\t\tip protocol icmp accept # handle 8\n\t\tip6 nexthdr ipv6-icmp accept # handle 9\n\t\ttcp dport 22 accept # handle 10\n\t\treject # handle 11\n\t}\n\n\tchain forward { # handle 2\n\t\ttype filter hook forward priority filter; policy accept;\n\t\tdrop # handle 12\n\t}\n\n\tchain output { # handle 3\n\t\ttype filter hook output priority filter; policy accept;\n\t}\n}\ntable ip filter { # handle 26\n\tchain DOCKER-USER { # handle 1\n\t\tmeta mark set 0x00000001 # handle 2\n\t}\n}\n# drop ルールの前に insert する(ここの `handle 12` は上で確認した handle に変更してください)\n$ sudo nft insert rule inet filter forward handle 12 mark 1 accept\n# ルールを /etc/nftables.conf に保存する\n$ sudo nft list ruleset | sudo tee /etc/nftables.conf \ntable inet filter {\n\tchain input {\n\t\ttype filter hook input priority filter; policy accept;\n\t\tct state { established, related } accept\n\t\tct state invalid drop\n\t\tiifname &quot;lo&quot; accept\n\t\tip protocol icmp accept\n\t\tip6 nexthdr ipv6-icmp accept\n\t\ttcp dport 22 accept\n\t\treject\n\t}\n\n\tchain forward {\n\t\ttype filter hook forward priority filter; policy accept;\n\t\tmeta mark 0x00000001 accept\n\t\tdrop\n\t}\n\n\tchain output {\n\t\ttype filter hook output priority filter; policy accept;\n\t}\n}\ntable ip filter {\n\tchain DOCKER-USER {\n\t\tmeta mark set 0x00000001\n\t}\n}</code></pre></div>\n<p>nftables の設定の保存が完了したら、 <code class=\"language-text\">docker.service</code> を再起動することで\ndocker によりファイアウォールルールが作成されます。\n(docker は iptables フロントエンドを使用するため、 <code class=\"language-text\">iptables-nft</code> パッケージに付属する <code class=\"language-text\">iptables</code> コマンドを使用して\nルールが追加されます。)\n念のため <code class=\"language-text\">nftables.service</code> も再起動して、今保存したルールを再読み込みします。</p>\n<p><code class=\"language-text\">sudo systemctl restart nftables docker</code></p>\n<p><code class=\"language-text\">docker.service</code> が正常に起動したら、 docker のルールが追加され、コンテナとの通信ができるようになっているはずです。</p>\n<h2>nftables インストール前の iptables ルールの参照</h2>\n<p><code class=\"language-text\">iptables</code> コマンドの代わりに <code class=\"language-text\">iptables-legacy</code> コマンドを使用することで、\niptables で使っていたルールを確認することができます。</p>\n<p>docker のルールもこちらからインポートしようかなと思ったのですが、そうすると iptables-nft の互換性が壊れてしまって\ndocker.service の起動に失敗したので、 ArchWiki の方法に従いました。</p>","frontmatter":{"title":"nftablesでdockerを使ってみました","date":"February 22, 2020"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"2020-02/nftables-with-docker/","previous":{"fields":{"slug":"2020-02/xrandr-changes-resolution/"},"frontmatter":{"title":"XRandRが自動で解像度を変えてくれると思ったら勘違いでした"}},"next":null}}}