{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2020-03/sequential-number-in-spot-fleet-instances/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"c692e189-a0ba-59b3-85ac-60e5a5795168","excerpt":"AWS でスポットインスタンスを複数起動して大量の処理を行うことがたまにあります。\nTerraform で SpotFleet をリクエストして複数のインスタンスを立ち上げることはできますが、個別に user_data を指定するのは\n少し面倒です。 ただ、同じ user_data…","html":"<p>AWS でスポットインスタンスを複数起動して大量の処理を行うことがたまにあります。\nTerraform で SpotFleet をリクエストして複数のインスタンスを立ち上げることはできますが、個別に user_data を指定するのは\n少し面倒です。</p>\n<p>ただ、同じ user_data でも、重複しない連番さえ取ることができればなんとかなることも多いはず……と思っていて、\nパラメータストアを使ったり DynamoDB の AtomicCounter を使ったりしているようですが、\nAWS CLI + jq だけで生成する方法を考えてみました。</p>\n<h2>スクリプト</h2>\n<div class=\"gatsby-highlight\" data-language=\"shellscript\"><pre class=\"language-shellscript\"><code class=\"language-shellscript\">#!/bin/bash\n\nTOKEN=$(curl -s -XPUT &quot;http://169.254.169.254/latest/api/token&quot; -H &quot;X-aws-ec2-metadata-token-ttl-seconds: 21600&quot;)\nINSTANCE_ID=$(curl -sH &quot;X-aws-ec2-metadata-token: $TOKEN&quot; http://169.254.169.254/latest/meta-data/instance-id)\nFLEET_ID=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID | jq -r &#39;.Reservations[].Instances[].Tags[] | select(.Key == &quot;aws:ec2spot:fleet-request-id&quot;).Value&#39;)\nTARGET_CAPACITY=$(aws ec2 describe-spot-fleet-requests --spot-fleet-request-ids $FLEET_ID | jq &#39;.SpotFleetRequestConfigs[].SpotFleetRequestConfig.TargetCapacity&#39;)\n\nwhile true; do\n  aws ec2 describe-instances --filter Name=tag:aws:ec2spot:fleet-request-id,Values=$FLEET_ID | jq -r &#39;.Reservations[].Instances[].InstanceId&#39; | sort &gt; /tmp/instance_ids.txt\n  if [ $(cat /tmp/instance_ids.txt | wc -l) -eq $TARGET_CAPACITY ]; then\n    break\n  fi\n  sleep 10\ndone\n\ncat /tmp/instance_ids.txt|awk &quot;/$INSTANCE_ID/{print FNR - 1}&quot;\nrm /tmp/instance_ids.txt</code></pre></div>\n<p>SpotFleet で起動したインスタンスには、 FleetRequestId のタグが付けられています(というか taggingRole がありますよね)。\nTag がついているということはインスタンスをフィルタリングできるので、 FleetRequest 内のインスタンスIDを列挙してソートし、\n自分のインスタンスIDの位置を awk で導出しています。(今回は 0-origin にしました。)</p>\n<p>これの弱点？として、インスタンスが全て立ち上がっているときを想定しているため、起動していないインスタンスは待ちますが、\n既に終了したインスタンスがあって CLI で取得できなくなった場合は永遠に待ち続けてしまいます。\n時間が経ってから呼ぶ可能性があるなら <code class=\"language-text\">/tmp/instance_ids</code> を消さないようにするか、\n起動時に自動実行しておいて番号自体をキャッシュすればある程度回避できそうです。</p>\n<p>Ansible とか使えばいいのでは？という気持ちも少しずつ出てきています。\nというか、こういった分離しやすいワークロードを分散して実行するようなツール、ありそうなんですよね……。\nDocker 化してオーケストレーションが早そうではあります。 </p>","frontmatter":{"title":"SpotFleet内の複数インスタンスで連番を生成するスクリプト","date":"March 01, 2020"}}},"pageContext":{"slug":"2020-03/sequential-number-in-spot-fleet-instances/","previous":{"fields":{"slug":"2020-02/sudo-with-login-option-behavior-of-quote/"},"frontmatter":{"title":"sudoに-iオプションをつけるとクオートの挙動が変わってハマりました"}},"next":{"fields":{"slug":"2020-03/scalajs-1-0-released/"},"frontmatter":{"title":"Scala.js 1.0 がリリースされました"}}}}}