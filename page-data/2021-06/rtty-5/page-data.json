{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2021-06/rtty-5/","result":{"data":{"site":{"siteMetadata":{"title":"Blog"}},"markdownRemark":{"id":"c52d40de-8382-5f32-88e1-2a17ba8068b4","excerpt":"前回はサンプリングレートや量子化ビット数を変更できるようにしましたが、\nオリジナルのファイルから ffmpeg のデフォルト設定で wav に変換すると、\n48kHz となり、実行時間が気になってきます。\nそこで、高速化を試すことにしました。 真っ先に、リストに append したり pop…","html":"<p>前回はサンプリングレートや量子化ビット数を変更できるようにしましたが、\nオリジナルのファイルから ffmpeg のデフォルト設定で wav に変換すると、\n48kHz となり、実行時間が気になってきます。\nそこで、高速化を試すことにしました。</p>\n<p>真っ先に、リストに append したり pop したりするのは不安になってくるので、\narray をリングバッファとして使いましょう。</p>\n<p>その次はどこが遅いか調べます。<code class=\"language-text\">cProfile</code> なんかを使うとよさそうです。\n調べてみると、一番遅いのは <code class=\"language-text\">sum</code> の呼び出しでしょうか。</p>\n<p>window<em>size で平滑化(？)していますが、毎回その全てを足し合わせるのは効率が悪いですね。\n実質的にしなければいけないのは、window</em>size 分だけ前の値を引いて、新しい値を足すことです。\n別の class に切り出して、インデックスの管理もその中に任せましょう。</p>\n<p>ファイルも分割したいですが、カレントディレクトリにある python ファイルを実行すると、\nexplicit relative import が使えないようなので、<code class=\"language-text\">src</code> ディレクトリ内にファイルを移動して、\n<code class=\"language-text\">python -m src.main</code> のように呼び出すようにします。</p>\n<p><code class=\"language-text\">**</code> 演算子は、2乗とか決まっていたら乗算で書いた方が早いようですね。\n値にあまり意味はなく (値に失礼)、大小を比較しているのみのため、<code class=\"language-text\">sqrt</code> も不要でしょう。\n削除しましょう。</p>\n<p>さて、ちまちまと高速化してきましたが、一番遅いのは多分 stdout です。ファイルに書くようにしましょう。\nだいたい8倍くらいは高速になりました、多分。</p>","frontmatter":{"title":"RTTY のデコードを試す(5)","date":"June 18, 2021"}}},"pageContext":{"slug":"2021-06/rtty-5/","previous":{"fields":{"slug":"2021-06/vaccine/"},"frontmatter":{"title":"都内でのワクチン接種"}},"next":null}}}